[{"content":"If you as me have single monitor and 2 Mac devices (for example, I have corporate Macbook and personal Mac Mini) you may want to use the same monitor for both devices. And you may want to switch between them without unplugging and plugging cables or selecting input source using monitor buttons.\nIn this post I will show you how to configure hotkeys for that.\nHardware You will need a monitor with multiple input sources. For example, I have Dell S2722QC tt has 2 HDMI ports and 1 USB-C port where:\nMacbook Air connected to port HDMI-1 Mac Mini connected to port USB-C-1 Software There is app called BetterDisplay that has a lot of powerful features. But for our case we need only one feature - change display inputs using DDC.\nInstall it on both Macs. You will have 14 days trial period with all PRO features.\nEnable Accessibility for BetterDisplay in System Settings -\u0026gt; Privacy \u0026amp; Security -\u0026gt; Accessibility.\nThen try to switch input source by clicking on BetterDisplay icon in the menu bar -\u0026gt; DDC Input Source -\u0026gt; Select next port.\nIf it works, you can continue to the next step. Otherwise check if your monitor supports DDC protocol and ensure Accessibility is enabled for BetterDisplay.\nGo to Settings -\u0026gt; Displays -\u0026gt; \u0026ldquo;Your monitor name\u0026rdquo; -\u0026gt; DDC Input Sources:\n","permalink":"http://localhost:1313/posts/monitor-input-source-control-mac/","summary":"\u003cp\u003eIf you as me have single monitor and 2 Mac devices (for example, I have corporate Macbook and personal Mac Mini) you may want to use the same monitor for both devices. And you may want to switch between them without unplugging and plugging cables or selecting input source using monitor buttons.\u003c/p\u003e\n\u003cp\u003eIn this post I will show you how to configure hotkeys for that.\u003c/p\u003e","title":"Monitor input source control on Mac"},{"content":"In this post I have tried to structure the content of my talks about drone.io CI/CD platform. I hope, this will be useful for those who are not familiar with it.\nIf you know Russian language, you can watch one of my talks about drone.io here or there.\nOverview Drone.io is worth a closer look because:\nIt is an opensource project, written in GoLang. You can check the sources, you can contribute.\nIt is a container native. Everything executed in an isolated Docker container. All native and custom plugins are docker images. And drone.io can be easily run using docker.\nPipelines are simply configurable using drone.yml. You don’t need to learn new DSL. drone.yml’s structure is intuitive and it’s similar to the format of other popular platforms (Circle CI, Travis CI, Gitlab). Moreover, if you don’t like YML, drone supports Jsonnet and Starlark configuration languages.\nSupport of popular git providers (GitHub, BitBucket, GitLab, Gogs, Gitea, etc).\nPowerful plugin system. Using them you can customize the scenario of your pipeline or extend the system’s functionality.\nKubernetes support. You can run your pipelines in your kubernetes cluster.\nLicense Drone.io has enterprise and community (open source) licenses.\nHere you can find the list of features available in both editions. As you see, the most interesting features are available only in the enterprise edition.\n","permalink":"http://localhost:1313/posts/intro-to-drone/","summary":"\u003cp\u003eIn this post I have tried to structure the content of my talks about \u003ca href=\"https://drone.io\"\u003edrone.io\u003c/a\u003e CI/CD platform. I hope, this will be useful for those who are not familiar with it.\u003c/p\u003e","title":"Introduction to Drone.io"},{"content":"¡Hola, amigos!\nIn this post, I will quickly descibe how you can build your own drone.io docker image.\nDrone is very popular container native CI/CD platform. Not long time ago, there was release of new 1.0 version of drone. Which brang a lot of cool features and new license. The license tells that we can use Enterprise version of drone for free without any limits by building our own docker image if we are individuals or startup (read the licence for more detail).\nSo, how to build it?\nInstructions First, clone the drone repo to your local machine.\ngit clone git@github.com:drone/drone.git Second, checkout to version of drone you want to build. For example, I want to build v1.3.1:\ngit checkout v1.3.1 We will use single dockerfile to build the image. To do so, we need to add extra step to existing dockerfile which is in docker directory. Let\u0026rsquo;s say we want to build docker image for linux OS and amd64 architecture, then we will edit docker/Dockerfile.server.linux.amd64.\nIf you check the dockerfile you will see, that binaries are just copied into docker image during the build and they are built outside of the docker build. So, the step we will add to dockerfile is go build step.\nTo build the binary, we need to know what version of go is used for building binary in original docker image. We can find it in drone.yml build step. For version 1.3.1 of drone golang:1.12.9 docker image is used for building binaries.\nThen, we use same image to build binary in our dockerfile:\ndocker/Dockerfile.server.linux.amd64\nFROM golang:1.12.9 as builder WORKDIR /go/src/github.com/drone/drone COPY . . ENV GOOS linux ENV GOARCH amd64 ENV CGO_ENABLED 1 ENV REPO github.com/drone/drone ENV GO111MODULE on RUN go build -tags nolimit -ldflags \u0026#34;-extldflags \\\u0026#34;-static\\\u0026#34;\u0026#34; -o release/linux/${GOARCH}/drone-server ${REPO}/cmd/drone-server FROM alpine:3.9 as alpine RUN apk add -U --no-cache ca-certificates FROM alpine:3.9 EXPOSE 80 443 VOLUME /data ENV GODEBUG netdns=go ENV XDG_CACHE_HOME /data ENV DRONE_DATABASE_DRIVER sqlite3 ENV DRONE_DATABASE_DATASOURCE /data/database.sqlite ENV DRONE_RUNNER_OS=linux ENV DRONE_RUNNER_ARCH=amd64 ENV DRONE_SERVER_PORT=:80 ENV DRONE_SERVER_HOST=localhost ENV DRONE_DATADOG_ENABLED=true ENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series COPY --from=alpine /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ COPY --from=builder /go/src/github.com/drone/drone/release/linux/amd64/drone-server /bin/ ENTRYPOINT [\u0026#34;/bin/drone-server\u0026#34;] Also we need to delete .dockerignore file from root of the repo.\nrm .dockerignore Then we build docker image like:\ndocker build -t alikhil/drone:1.3.1 -f docker/Dockerfile.server.linux.amd64 . That\u0026rsquo;s all! Now you can use own newly built docker image instead of official one if your use case meet license conditions.\n","permalink":"http://localhost:1313/posts/build-own-drone-image/","summary":"\u003cp\u003e¡Hola, amigos!\u003c/p\u003e\n\u003cp\u003eIn this post, I will quickly descibe how you can build your own \u003ca href=\"https://drone.io\"\u003edrone.io\u003c/a\u003e docker image.\u003c/p\u003e","title":"Build own drone.io docker image"},{"content":"Here is a list of talks I gave in different conferences and meetups:\nCI/CD for golang projects with drone.io Avito.Tech meetup in Kazan, 2020\nDrone.io #101 Golang Meetup in Yoshkar-Ola, 2020\nConfiguring CI/CD for IaC Innopolis DevOps Meetup, 2022\nLink to timecode: https://www.youtube.com/watch?v=bZXlizneB8U\u0026amp;t=2840s\nIaC with Terraform and drone.io YandexScale in Moscow, 2022\nLink to timecode: https://www.youtube.com/watch?v=5wZ2G5idK1w\u0026amp;t=2318s\n","permalink":"http://localhost:1313/pages/talks/","summary":"\u003cp\u003eHere is a list of talks I gave in different conferences and meetups:\u003c/p\u003e\n\u003ch4 id=\"cicd-for-golang-projects-with-droneio\"\u003eCI/CD for golang projects with drone.io\u003c/h4\u003e\n\u003cp\u003eAvito.Tech meetup in Kazan, 2020\u003c/p\u003e\n\n\n    \n    \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/mKT-bLdRGvQ?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\n      \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003ch4 id=\"droneio-101\"\u003eDrone.io #101\u003c/h4\u003e\n\u003cp\u003eGolang Meetup in Yoshkar-Ola, 2020\u003c/p\u003e\n\n\n    \n    \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/MSsHRo9CYvk?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\n      \u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003ch4 id=\"configuring-cicd-for-iac\"\u003eConfiguring CI/CD for IaC\u003c/h4\u003e\n\u003cp\u003eInnopolis DevOps Meetup, 2022\u003c/p\u003e","title":"Talks"},{"content":"Hello, folks!\nToday I want you to share with you tutorial on how to deploy your SPA application to Kubernetes. Tutorial is oriented for those don\u0026rsquo;t very familiar with docker and k8s but want their single page application run in k8s.\nDockerize the application I expect that you have docker installed in your machine. If it isn\u0026rsquo;t you can install it by following official installation guide.\nAs SPA project I will use vue-realworld-example-app as SPA project. You can your own SPA project if you have one.\nSo, I have cloned it, installed dependencies and built:\ngit clone https://github.com/gothinkster/vue-realworld-example-app yarn yarn build Next step is to decide how our application will be served. There are bunch of possible solutions but I decided to use nginx since it recommends itself as one of the best http servers.\nTo serve SPA we need to return all requested files if they exist or otherwise fallback to index.html. To do so I wrote the following nginx config:\nnginx.conf\n# ... # other configs server { listen 80; root /app; location / { alias /app/; try_files $uri /index.html; } } Full config file can be found in my fork of the repo\nThen, we need to write Dockerfile for building image with our application. Here it is:\nFROM nginx WORKDIR /root/ COPY ./dist /app COPY ./nginx.conf /etc/nginx/conf.d/default.conf We assume that artifacts of build placed in the dist directory and so that during the docker build the content of dist directory copied into containers /app directory.\nNow, we are ready to build it:\ndocker build -t alikhil/my-spa:0.1 . And run it:\ndocker run -p 8080:80 alikhil/my-spa:0.1 Then if we open http://localhost:8080 we will see something similar to:\nCool! It works!\nWe will need to use our newly builded docker image to deploy to k8s. So, we need to make it available from the k8s cluster by pulling to some docker registry. I will push image to DockerHub:\ndocker push alikhil/my-spa:0.1 Deploy to k8s To run the application in k8s we will use Deployment resource type. Here it is:\ndeployment.yaml\napiVersion: extensions/v1beta1 kind: Deployment metadata: name: my-spa labels: app: my-spa spec: replicas: 1 template: metadata: labels: app: my-spa spec: containers: - image: alikhil/my-spa:0.1 name: spa ports: - containerPort: 80 resources: limits: cpu: 150m memory: 250Mi Then we create deployment by running kubectl apply -f deployment.yaml and newly created pods can found:\n$ kubectl get pods NAME READY STATUS RESTARTS AGE my-spa-84b6dcd48d-mhv9f 1/1 Running 0 18s Then we need to expose our app to the world. It can be done by using service of type NodePort or via Ingress. We will do it with Ingress. For that we will need service:\nservice.yaml\napiVersion: v1 kind: Service metadata: name: my-spa labels: app: my-spa spec: type: ClusterIP ports: - port: 80 targetPort: 80 protocol: TCP name: http selector: app: my-spa And ingress itself:\ningress.yaml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: my-spa-ing annotations: kubernetes.io/ingress.class: nginx spec: tls: - hosts: - my-spa.example.com secretName: my-spa-cert-secret rules: - host: my-spa.example.com http: paths: - path: / backend: serviceName: my-spa servicePort: 80 kubectl apply -f ingress.yaml -f service.yaml And here it is! Our SPA runs in the k8s!\n","permalink":"http://localhost:1313/posts/deploy-spa-to-k8s/","summary":"\u003cp\u003eHello, folks!\u003c/p\u003e\n\u003cp\u003eToday I want you to share with you tutorial on how to deploy your SPA application to Kubernetes. Tutorial is oriented for those don\u0026rsquo;t very familiar with docker and k8s but want their single page application run in k8s.\u003c/p\u003e","title":"Deploy SPA application to Kubernetes"},{"content":"If you expected only post on IT topics on this blog, I am sorry :( Today I\u0026rsquo;ll share you my experience in learning a new language. I am practicing these techniques and tips for mastering Español, but I am sure that you can apply them to most of the other languages.\nGamification If you are only starting to learn then this will be helpful for you in double. Most of the people give up learning after several weeks or even days after they begin. It\u0026rsquo;s because of their motivation. It becomes lower with time. And in the beginning when you know almost nothing and understand that you should work hard and work a lot to learn. It really demotivates. And I think elements of gamification will help to increase motivation and turn learning process to habit. You can gamify your learning in any way you want. I recommend:\nDuolingo or Linguoleo - good for learning the basics of the language Tinycard - for learning/memorizing new words Listen As soon as you have learned basics, start listening to podcasts. There are some free audio podcasts oriented for beginners. For example, in Spanish, it\u0026rsquo;s a Notes in Spanish.\nCreate a playlist with up to 20 songs you like on language you learn and listen to them regularly. And keep listening until you will understand what a song about. You don\u0026rsquo;t have to translate all the words in each song. In fact, It is not very useful. But opposite, when you learn new words from textbook, tinycard or from anywhere else and you hear this word while you are listening to your playlist you learn better.\n\u0026ndash; Oh, wait. I know what this word means \u0026hellip;\nWatch If you are fun of TV-shows, you can start watching them in the language you learn. With subtitles or without them. Of course, it requires some basic knowledge. If you care that you will miss some key points of the story and prefer to fully understand it, you can watch sitcoms which don\u0026rsquo;t have almost anything in common between series.\n","permalink":"http://localhost:1313/posts/how-to-start-learning-new-language/","summary":"\u003cp\u003eIf you expected only post on IT topics on this blog, I am sorry :(\nToday I\u0026rsquo;ll share you my experience in learning a new language. I am practicing these techniques and tips for mastering Español, but I am sure that you can apply them to most of the other languages.\u003c/p\u003e","title":"Tips for language learners"},{"content":"Hello, folks!\nIn this post, I will go through configuring Bitly OAuth2 proxy in a kubernetes cluster.\nA few days ago I was configuring SSO for our internal dev-services in KE Technologies.\nAnd I spent the whole to make it work properly, and at the end I decided that I will share my experience by writing this post, hoping that it will help others(and possibly me in the future) to go through this process.\nWhat do we want? We have internal services in our k8s cluster that we want to be accessible for developers. It can be kubernetes-dashboard or kibana or anything else.\nBefore that we used Basic Auth, it\u0026rsquo;s easy to setup in ingresses. But this approach has several disadvantages:\nWe need to share a single pair of login and password for all services among all developers Developers will be asked to enter credentials each time when they access service first time What we want is that developer will log in once and will have access to all other services without additional authentication.\nSo, a possible scenario could be:\nDevelopers open https://kibana.example.com which is internal service Browser redirects them to https://auth.example.com where they sign in After successful authentication browser redirects them to https://kibana.example.com Preparation Update UPD 1.0(07/30/18) Using kube-lego for configuring Let\u0026rsquo;s Encrypt certificates is depricated now. Consider using cert-manager instead.\nUPD 2.0(08/24/18) Initialy, when I was writing this post I was using old version of nginx 0.9.0, because it did not work correctly on newer version. Now, I found the problem and it have been fixed in 0.18.0 release. But ingress exposing private services should be updated(more details):\nnginx.ingress.kubernetes.io/auth-signin: https://auth.example.com/oauth2/start?rd=https://$host$request_uri$is_args$args nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth-proxy.svc.cluster.local:4180/oauth2/auth Kubernetes First of all, we need a Kubernetes cluster. I will use the newly created cluster in Google Cloud Platform with version 1.8.10-gke.0. If you have a cluster with configured ingress and https you can skip this step.\nThen we need to install nginx ingress and kube lego. Let\u0026rsquo;s do it using helm:\nInit helm With RBAC:\n# giving default accout admin role: ACCOUNT=$(gcloud info --format=\u0026#39;value(config.account)\u0026#39;) kubectl create clusterrolebinding owner-cluster-admin-binding \\ --clusterrole cluster-admin \\ --user $ACCOUNT kubectl -n kube-system create sa tiller kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller helm init --service-account tiller without RBAC:\nhelm init Install nginx-ingress helm install stable/nginx-ingress --name nginx-ing --namespace nginx-ing \\ --set controller.image.repository=gcr.io/google_containers/nginx-ingress-controller \\ --set controller.image.tag=\u0026#34;0.9.0-beta.15\u0026#34; --set rbac.create=true # if RBAC is enabled in the cluster # see all options here: https://github.com/kubernetes/charts/blob/master/stable/nginx-ingress/values.yaml After it\u0026rsquo;s installed we can retrieve controller IP address:\nkubectl --namespace nginx-ing get services -o wide -w nginx-ing-nginx-ingress-controller and create DNS record to point our domain and subdomains to this IP address.\nA example.com xxx.xxx.xx.xxx CNAME *.example.com example.com Install kube-lego helm install --name kube-lego stable/kube-lego --namespace kube-lego \\ --set config.LEGO_SUPPORTED_INGRESS_CLASS=nginx \\ --set config.LEGO_SUPPORTED_INGRESS_PROVIDER=nginx \\ --set config.LEGO_DEFAULT_INGRESS_CLASS=nginx \\ --set config.LEGO_URL=https://acme-v01.api.letsencrypt.org/directory \\ --set rbac.create=true \\ --set image.tag=0.1.5 \\ --set config.LEGO_LOG_LEVEL=debug Test it! Let\u0026rsquo;s run simple HTTP server as service and expose it using nginx ingress:\nkubectl run simple-http --image=strm/helloworld-http --port=80 kubectl expose deployment simple-http --name example-service --port=80 --target-port=80 --type=NodePort example-ing.yaml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: example annotations: kubernetes.io/ingress.class: nginx kubernetes.io/tls-acme: \u0026#39;true\u0026#39; spec: rules: - host: service.example.com http: paths: - backend: serviceName: example-service servicePort: 80 path: / tls: - hosts: - \u0026#34;service.example.com\u0026#34; secretName: ing-tls kubectl apply -f example-ing.yaml Wait for a few seconds and open https://service.example.com and you should see something similar to this:\nExample GitHub application In this post, we will use GitHub accounts for authentication.\nSo, go to https://github.com/settings/applications/new and create new OAuth application\nFill Authorization callback URL field with https://auth.example.com/oauth2/callback where example.com is your domain name.\nGitHub Application After creating an application you will have Client ID and Client Secret which we will need in next step.\nDeploy OAuth Proxy There are a lot of docker images for OAuth proxy, but we can not use them because they do not support domain white-listing. The problem is that such functionality has not implemented yet.\nActualy there are several PRs that solve that problem but seems to be they frozen for an unknown amount of time.\nSo, the only thing I could do is to merge one of the PRs to current master and build own image.\nYou also can use my image, but if you worry about security just clone my fork and build image yourself.\nLet\u0026rsquo;s create a namespace and set it as current:\nkubectl create ns oauth-proxy kns oauth-proxy # I am using kubectx tool -\u0026gt; https://github.com/ahmetb/kubectx Deploy secret secret.yml\napiVersion: v1 kind: Secret metadata: name: oauth-proxy-secret namespace: oauth-proxy data: github-client-id: base64(YOUR_CLIENT_ID) github-client-secret: base64(YOUR_CLIENT_SECRET) cookie-secret: base64(random_string) kubectl create -f secret.yml Deploy deployment oauth-proxy.deployment.yml\napiVersion: extensions/v1beta1 kind: Deployment metadata: labels: k8s-app: oauth2-proxy name: oauth2-proxy namespace: oauth-proxy spec: replicas: 1 selector: matchLabels: k8s-app: oauth2-proxy template: metadata: labels: k8s-app: oauth2-proxy spec: containers: - name: oauth2-proxy image: alikhil/oauth2_proxy:2.2.2 imagePullPolicy: Always args: - --provider=github - --email-domain=* - --upstream=file:///dev/null - --http-address=0.0.0.0:4180 - --whitelist-domain=.example.com - --cookie-domain=.example.com # - --cookie-expire duration: expire timeframe for cookie (default 168h0m0s) # - --cookie-name string: the name of the cookie that the oauth_proxy creates (default \u0026#34;_oauth2_proxy\u0026#34;) # - --cookie-refresh duration: refresh the cookie after this duration; 0 to disable # - --cookie-secret string: the seed string for secure cookies (optionally base64 encoded) env: - name: OAUTH2_PROXY_CLIENT_ID valueFrom: secretKeyRef: name: oauth-proxy-secret key: github-client-id - name: OAUTH2_PROXY_CLIENT_SECRET valueFrom: secretKeyRef: name: oauth-proxy-secret key: github-client-secret - name: OAUTH2_PROXY_COOKIE_SECRET valueFrom: secretKeyRef: name: oauth-proxy-secret key: cookie-secret ports: - containerPort: 4180 protocol: TCP kubectl create -f oauth-proxy.deployment.yml Deploy service oauth-service.yml\napiVersion: v1 kind: Service metadata: labels: k8s-app: oauth2-proxy name: oauth2-proxy namespace: oauth-proxy spec: type: NodePort ports: - name: http port: 4180 protocol: TCP targetPort: 4180 selector: k8s-app: oauth2-proxy kubectl create -f oauth-service.yml Deploy ingress oauth-ing.yml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: oauth2-proxy namespace: oauth-proxy annotations: kubernetes.io/tls-acme: \u0026#34;true\u0026#34; kubernetes.io/ingress.class: \u0026#34;nginx\u0026#34; spec: rules: - host: auth.example.com http: paths: - backend: serviceName: oauth2-proxy servicePort: 4180 path: /oauth2 tls: - hosts: - auth.example.com secretName: oauth-proxy-tls kubectl create -f oauth-ing.yml Test it! You can update ingress that we used while configuring nginx-ingress or create a new one:\nexample-ing.yml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: example annotations: kubernetes.io/ingress.class: nginx kubernetes.io/tls-acme: \u0026#39;true\u0026#39; ingress.kubernetes.io/auth-url: https://auth.example.com/oauth2/auth ingress.kubernetes.io/auth-signin: https://auth.example.com/oauth2/start?rd=https://$host$request_uri$is_args$args spec: rules: - host: service.example.com http: paths: - backend: serviceName: example-service servicePort: 80 path: / tls: - hosts: - service.example.com secretName: ing-tls kubectl apply -f example-ing.yml Then visit service.example.com and you will be redirected to GitHub authorization page:\nGitHub Authorization page And once you authenticate, you will have access to all your services under ingress that point to auth.example.com until cookie expires.\nAnd that\u0026rsquo;s it! Now you can put any of your internal services behind ingress with OAuth.\nResources Here is a list of resources that helped me to go through this proccess first time:\nhttps://eng.fromatob.com/post/2017/02/lets-encrypt-oauth-2-and-kubernetes-ingress/ https://www.midnightfreddie.com/oauth2-proxy.html https://thenewstack.io/single-sign-on-for-kubernetes-dashboard-experience/ ","permalink":"http://localhost:1313/posts/oauth2-proxy-for-kubernetes-services/","summary":"\u003cp\u003eHello, folks!\u003c/p\u003e\n\u003cp\u003eIn this post, I will go through configuring \u003ca href=\"https://github.com/bitly/oauth2_proxy\"\u003eBitly OAuth2 proxy\u003c/a\u003e in a kubernetes cluster.\u003c/p\u003e","title":"Oauth2 Proxy for Kubernetes Services"},{"content":"Today I migrated my blog to Hugo engine. So, it\u0026rsquo;s my first post here, yaay!\nThere were only 2 posts in my last blog and I decided to not migrate the one about creating blog in Jekyll. Since it is not actual now.\n","permalink":"http://localhost:1313/posts/say-hello-to-hugo/","summary":"\u003cp\u003eToday I migrated my blog to \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e engine. So, it\u0026rsquo;s my first post here, yaay!\u003c/p\u003e","title":"Say hello to Hugo"},{"content":"Hi folks! It\u0026rsquo;s been a long time since I have published the last post, but now I came back with short quickstart guide in Go.\nIn this tutorial, we will configure Go environment in VS Code and write our first program in Go.\nInstall Go The first thing that you need to do it\u0026rsquo;s to install Go on your computer. To do so, download installer for your operating system from here and then run the installer.\nConfigure GOPATH By language convention, Go developers store all their code in a single place called workspace. Go also puts dependency packages in the workspace. So, in order to Go perform correctly, we need to set GOPATH variable with the path to the workspace.\nMacOS and Linux Set the GOPATH envar with workspace\nexport GOPATH=$HOME/go Also, we need to add GOPATH/bin to PATH in order to run compiler Go programs:\nexport PATH=$PATH:$GOPATH/bin Configure VS Code Install official Go extension.\nInstall delve debugger:\ngo get -u github.com/derekparker/delve/cmd/dlv I recommend you to add the following lines to your VS Code user settings:\nsettings.json\n{ \u0026#34;go.autocompleteUnimportedPackages\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;gofmt\u0026#34; } Windows Create GOPATH envar:\nset GOPATH=c:\\Users\\%USERNAME%\\go Also, we need to add GOPATH\\bin to PATH in order to run compiler Go programs:\nset PATH=%PATH%;%GOPATH%\\bin Create project Move to your GOPATH/src directory. Create a directory for your project:\ncd $GOPATH/src mkdir -p github.com/alikhil/hello-world-with-go Open it using vscode:\ncode github.com/alikhil/hello-world-with-go Hello World Let\u0026rsquo;s create a file named program.go and put the following code there:\nprogram.go\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;¡Hola, mundo!\u0026#34;) } Run the program Finally, to run the program by pressing the F5 button in VS Code and you should see the message printed to Debug Console.\nThat\u0026rsquo;s all! My congratulations, you have just written your first program in Go!\nTroubleshooting If you fail to run your program and there is some message like \u0026ldquo;Cannot find a path to go\u0026rdquo;. Try to add to your PATH envar with path directory where go binary is stored.\nFor example in MacOS I have added following line to my ~/.bash_profile:\nexport PATH=/usr/local/go/bin:$PATH ","permalink":"http://localhost:1313/posts/go-quickstart/","summary":"\u003cp\u003eHi folks!\nIt\u0026rsquo;s been a long time since I have published the last post, but now I came back with short quickstart guide in \u003cstrong\u003eGo\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn this tutorial, we will configure Go environment in VS Code and write our first program in Go.\u003c/p\u003e","title":"Go Quickstart"}]