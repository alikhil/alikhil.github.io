[{"content":"Recently I have configured out how to access my home and cloud network remotely using WireGuard and Mikrotik Hex S router. With this step-by-step tutorial I will show you (and perhaps my future self) how to do it.\nRequirements What I have A Mikrotik Hex S router with a dynamic public IP address.\nServices in a cloud VM (Ubuntu 22) with a static public IP address.\nServices in a VM on my home network.\nClients - laptops and phones - that need to access the services in my home and cloud network.\nWhat I want Clients outside of my home network should be able to access services both on my home and cloud network.\nOnly traffic to my home and cloud network should be routed through the VPN.\nClients inside my home network should be able to access services on my cloud network without additional configuration.\nNo external centralized service should be used.\nNo open ports on my home router.\nImplementation Nowadays, there are plenty of VPN solutions like zero-tier and tailscale. However, I think they are too bloated for my humble needs and WireGuard is more than enough for that.\nBecause of last requirement, it\u0026rsquo;s obvious that traffic to home network should be routed though my cloud server.\nSo, I will use WireGuard to create a tunnel between mikrotik router and cloud server.\nThis way, I can access my home network from anywhere without exposing any ports on my home router.\nI. Initial configuration of WireGuard on cloud VM For the sake of reproducibility and simplicity I will use vanilla wireguard and configure it on OS level, not in docker container.\n1. Install wireguard on Ubuntu 22.04 sudo apt update sudo apt install wireguard -y # Edit the configuration file sudo nano /etc/sysctl.conf # Find and uncomment the line: net.ipv4.ip_forward=1 # Save and exit # Then apply the changes: sudo sysctl -p 2. Create public and private key sudo su - cd /etc/wireguard # Generate private and public keys wg genkey | tee privatekey | wg pubkey \u0026gt; publickey # Check the keys cat privatekey cat publickey 3. Create the configuration file I will use 172.16.10.0/24 subnet for Wireguard network.\nsudo nano /etc/wireguard/wg0.conf # Add the following lines: [Interface] Address = 172.16.10.1/24 ListenPort = 27277 # You can choose any port you want Privatekey = \u0026lt;your_private_key\u0026gt; # from previous step # These are placeholder lines for next steps, keep them commented for now # # Mikrotik peer # [Peer] # AllowedIPs = 172.16.10.0/24,192.168.0.0/16 # PublicKey = mikrotik public key # # client peer # [Peer] # AllowedIPs = 172.16.10.2/32 # PublicKey = first client device public key # CRTL+X: save and exit # Change the permissions of the configuration file chmod 600 wg0.conf 4. Start the WireGuard interface # Enable service to start on boot systemctl enable wg-quick@wg0.service systemctl daemon-reload # Start the service systemctl start wg-quick@wg0 # Check wg status wg It should show the interface is up like this\nMore commands to check the status of the service:\n# Check the status of the service systemctl status wg-quick@wg0 # Restart the service if needed systemctl restart wg-quick@wg0 II. Mikrotik configuration I will use Mikrotik command line interface (CLI) to configure the router. You can use Winbox or WebFig if you prefer.\n1. Create WireGuard interface # Create WireGuard interface and it will automatically generate private and public keys /interface wireguard add listen-port=13231 mtu=1420 name=cloud-wg # Add the IP address to the interface /ip add address=172.16.10.3/24 interface=cloud-wg network=172.16.10.0 # Print the keys, you will need only the public key later /interface/wireguard/print 2. Create the peer Here we add cloud vm as a peer to the Mikrotik router\u0026rsquo;s wireguard. The public key of the cloud server is needed here.\n# In allowed-address we add IP ranges which will be routed through this peer # 172.21.0.0/16 - subnet of docker containers on cloud server # 172.16.10.0/16 - subnet of wireguard network /interface wireguard peers add allowed-address=172.16.10.0/24,172.21.0.0/16 \\ endpoint-address=cloud.vm.ip.address \\ endpoint-port=27277 \\ interface=cloud-wg \\ public-key=\u0026#34;PUT CLOUD SERVER PUBLIC KEY HERE\u0026#34; \\ name=peer1 persistent-keepalive=25s # Here is a tricky part # Routing rule for subnet of wireguard network is added automatically on adding IP address to the interface # But we need to add explicitly the route for docker containers subnet # You may need to adjust the distance and routing-table values /ip route disabled=no distance=1 dst-address=172.21.0.0/16 gateway=cloud-wg routing-table=main scope=30 suppress-hw-offload=no target-scope=10 3. Add WireGuard peer (VM) sudo nano /etc/wireguard/wg0.conf # Uncomment the lines for Mikrotik peer # Mikrotik peer [Peer] AllowedIPs = 172.16.10.0/24,192.168.0.0/16 PublicKey = mikrotik public key # Save and exit # Restart the WireGuard service sudo systemctl restart wg-quick@wg0 # Check if changes are applied wg show You should see the Mikrotik peer in the list of peers. More commands to tests connection between cloud vm and mikrotik wg Run in mikrotik CLI # ping wireguard IP of cloud server ping 172.16.10.1 # resolve google.com via adguard container on cloud vm put [resolve google.com server 172.21.0.114] Run in cloud server # ping wireguard IP of Mikrotik router ping 172.168.10.3 # resolve google.com via adguard container on home adguard dig google.com @192.168.11.2 Run on my Mac connected to home network # ping wireguard IP of cloud server ping 172.16.10.1 # resolve google.com via adguard container on cloud adguard dig google.com @172.121.0.114 IV. Add first client device as a peer I recommend you to use your smartphone as first client device, because it can work from both home WiFi and mobile data. This way you can test the connection from both networks.\nAlso, install on your smartphone:\nWireGuard app (iOS, Android) Network debugging app (iOS, Android) 1. Create keys for the client Install Wireguard app for your client OS.\nThen, generate public and private keys on the device, for that create config from scratch in the app and then click on Generate keypair button.\nOr you can generate keys on the cloud server and then copy them to the client device.\nwg genkey | tee peer-privatekey | wg pubkey \u0026gt; peer-publickey 2. Add the client as a peer to WireGuard config on cloud server On the cloud server, edit the WireGuard config file and add the client as a peer.\nEach time increment previous peer address by 1.\nsudo nano /etc/wireguard/wg0.conf # Uncomment the lines for client peer # client peer [Peer] AllowedIPs = 172.16.10.2/32 PublicKey = put public key # CRTL+X: save and exit # Restart the WireGuard service sudo systemctl restart wg-quick@wg0 # Check if changes are applied wg show 3. Continue configuring the client device You already have public and private keys for the client device, other configuration parameters are:\nInterface Address - It\u0026rsquo;s address of peer in wireguard subnet. Put the same address you set in AllowedIPs field in previous step. DNS servers - if you have adguard/pihole running on the cloud server, you can use it as a DNS server. Put it\u0026rsquo;s IP address here. MTU and ListenPort - you can leave them empty, they will be set automatically. Peer Endpoint - cloud server IP address and port (27277) Public key - public key of the cloud server AllowedIPs - here we put all subnets that we want to access from this current client device Here is an example of the configuration file for the client device:\n[Interface] PrivateKey = private-key-of-client-device Address = 172.16.10.2/32 DNS = 172.21.0.114 # IP of adguard container on cloud server [Peer] PublicKey = public-key-of-cloud-server AllowedIPs = 192.168.0.0/16, 172.16.10.0/24, 172.21.0.0/16 # subnets of home, cloud and wireguard network Endpoint = ip.of.cloud.servner:27277 That\u0026rsquo;s it! Disconnect your device from the home Wi-Fi, switch to mobile data and connect to the VPN.\nThen try to:\nping the cloud server and Mikrotik router IP addresses in wireguard subnet. check ports of services in docker containers on cloud and home server VM. ping cloud ping home check adguard port V. Bonus. DNS configuration Since I have 2 adguard instances and I use them as DNS servers everywhere, I will add DNS records for accessing my services:\n*.cloud.domain.com - pointing to traefik docker container on cloud server *.home.domain.com - pointing to traefik docker container on home server Thus, I can access my services using domain names instead of IP addresses.\nVI. Final thoughts I hope this tutorial was helpful for you. I will keep it updated if I find any issues or improvements.\nIf you have any questions or suggestions, feel free to leave a comment below.\nCredits to @laroberto for their guide on LAN access with WireGuard. I followed it to set up the initial configuration and then adapted it to my needs.\n","permalink":"https://alikhil.dev/posts/remote-lan-access-with-wireguard-and-mikrotik/","summary":"\u003cp\u003eRecently I have configured out how to access my home and cloud network remotely using WireGuard and Mikrotik Hex S router. With this step-by-step tutorial I will show you (and perhaps my future self) how to do it.\u003c/p\u003e","title":"Remote LAN access with WireGuard and Mikrotik"},{"content":"Recently I have replaced my stock ISP router with Mikrotik Hex S. I have been using it for a while and I am very happy with it. It is a very powerful device which can be programmed and automated with built-in scripting language.\nWhen I started writing my first scripts I faced a problem: how to store and use secrets in my scripts. I have found a solution and I want to share it with you.\nThe problem Let\u0026rsquo;s say I want to write a script that will send me telegram notifications. To do so I need to store my telegram bot token and chat id. Since I keep my RouterOS configuration in a git repository, I don\u0026rsquo;t want to hardcode my secrets in the script.\n:global sendTelegramMessage do={ :local botToken \u0026#34;1234567890:ABCDEFGHIJKLMN\u0026#34; :local chatId \u0026#34;10000000\u0026#34; :local message \u0026#34;$1\u0026#34; # telegram notification /tool fetch url=\u0026#34;https://api.telegram.org/bot$botToken/sendMessage\\?chat_id=$chatId\u0026amp;text=$message\u0026#34; keep-result=no } The solution RouterOS has low level feature /ppp secret which can be used to store secrets. However, it could be inconvenient and a bit messy to use it directly in scripts. Instead, I would like to have more high level API to store and use secrets.\nAnd, I have one. There is post in mikrotik forum by user with nickname Amm0. Ammo has shared a script of global function which can be used to store and retrieve secrets like this:\n$SECRET set mySecret password=\u0026#34;mySecretPassword\u0026#34; :put [$SECRET get mySecret] Now, I modify my script to use this function to keep it clean and secure:\n:global sendTelegramMessage do={ :local botToken :set botToken \u0026#34;$[$SECRET get TELEGRAM_TOKEN]\u0026#34; :local chatId \u0026#34;$[$SECRET get CHAT_ID]\u0026#34; :local message \u0026#34;$1\u0026#34; # telegram notification /tool fetch url=\u0026#34;https://api.telegram.org/bot$botToken/sendMessage\\?chat_id=$chatId\u0026amp;text=$message\u0026#34; keep-result=no } global SECRET function source code ### $SECRET # get \u0026lt;name\u0026gt; # set \u0026lt;name\u0026gt; password=\u0026lt;password\u0026gt; # remove \u0026lt;name # print :global SECRET :set $SECRET do={ :global SECRET # helpers :local fixprofile do={ :if ([/ppp profile find name=\u0026#34;null\u0026#34;]) do={:put \u0026#34;nothing\u0026#34;} else={ /ppp profile add bridge-learning=no change-tcp-mss=no local-address=0.0.0.0 name=\u0026#34;null\u0026#34; only-one=yes remote-address=0.0.0.0 session-timeout=1s use-compression=no use-encryption=no use-mpls=no use-upnp=no } } :local lppp [:len [/ppp secret find where name=$2]] :local checkexist do={ :if (lppp=0) do={ :error \u0026#34;\\$SECRET: cannot find $2 in secret store\u0026#34; } } # $SECRET :if ([:typeof $1]!=\u0026#34;str\u0026#34;) do={ :put \u0026#34;\\$SECRET\u0026#34; :put \u0026#34; uses /ppp/secrets to store stuff like REST apikeys, or other sensative data\u0026#34; :put \u0026#34;\\t\\$SECRET print - prints stored secret passwords\u0026#34; :put \u0026#34;\\t\\$SECRET get \u0026lt;name\u0026gt; - gets a stored secret\u0026#34; :put \u0026#34;\\t\\$SECRET set \u0026lt;name\u0026gt; password=\\\u0026#34;YOUR_SECRET\\\u0026#34; - sets a secret password\u0026#34; :put \u0026#34;\\t\\$SECRET remove \u0026lt;name\u0026gt; - removes a secret\u0026#34; } # $SECRET print :if ($1~\u0026#34;^pr\u0026#34;) do={ /ppp secret print where comment~\u0026#34;\\\\\\$SECRET\u0026#34; :return [:nothing] } # $SECRET get :if ($1~\u0026#34;get\u0026#34;) do={ $checkexist :return [/ppp secret get $2 password] } # $SECRET set :if ($1~\u0026#34;set|add\u0026#34;) do={ :if ([:typeof $password]=\u0026#34;str\u0026#34;) do={} else={:error \u0026#34;\\$SECRET: password= required\u0026#34;} :if (lppp=0) do={ /ppp secret add name=$2 password=$password } else={ /ppp secret set $2 password=$password } $fixprofile /ppp secret set $2 comment=\u0026#34;used by \\$SECRET\u0026#34; /ppp secret set $2 profile=\u0026#34;null\u0026#34; /ppp secret set $2 service=\u0026#34;async\u0026#34; :return [$SECRET get $2] } # $SECRET remove :if ($1~\u0026#34;rm|rem|del\u0026#34;) do={ $checkexist :return [/ppp secret remove $2] } :error \u0026#34;\\$SECRET: bad command\u0026#34; } Conclusion The good thing about this approach is that secrets storing and retrieving mechanism encapsulated and can be easily changed in the future without changing the scripts. Also, it is easy to use and understand.\nKeep your secrets safe and happy scripting!\n","permalink":"https://alikhil.dev/posts/saving-and-using-secrets-in-mikrotitk-routeros/","summary":"\u003cp\u003eRecently I have replaced my stock ISP router with \u003ca href=\"https://mikrotik.com/product/hex_s\"\u003eMikrotik Hex S\u003c/a\u003e. I have been using it for a while and I am very happy with it. It is a very powerful device which can be programmed and automated with built-in scripting language.\u003c/p\u003e\n\u003cp\u003eWhen I started writing my first scripts I faced a problem: how to store and use secrets in my scripts. I have found a solution and I want to share it with you.\u003c/p\u003e","title":"Storing and using secrets in Mikrotik RouterOS"},{"content":"My Projects 1mgr.xyz - On-demand mirror for images from dockerhub based on GitHub Actions and GitHub package registry. Open Source Contributions Here is a list of opensource projects I\u0026rsquo;ve worked on:\nPostgreSQL - implemented random numbers generator from Zipfian distribution for pgbench and psql command to show access methods info.\nupdatecli - enhanced helm chart changelog generation and GitLab plugin.\ngruntwork-io/terragrunt - made a few improvements on builtin functions and CLI commands.\nHarness (ex Drone.io) maintained documentation and patched and plugins for it.\nfile.d - added support for op_type param in Elasticsearch output plugin.\nfluent-kubernetes-daemonset - fixed json parsing in fluentd plugin for kubernetes.\nopentelemetry-go - Adds k8s.node.name and k8s.node.uid attribute keys to the semconv package.\nSee all my contributions on GitHub.\n","permalink":"https://alikhil.dev/pages/projects/","summary":"\u003ch2 id=\"my-projects\"\u003eMy Projects\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://1mgr.xyz\"\u003e1mgr.xyz\u003c/a\u003e - On-demand mirror for images from dockerhub based on GitHub Actions and GitHub package registry.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"open-source-contributions\"\u003eOpen Source Contributions\u003c/h2\u003e\n\u003cp\u003eHere is a list of opensource projects I\u0026rsquo;ve worked on:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePostgreSQL - implemented random numbers generator from \u003ca href=\"https://commitfest.postgresql.org/16/1379/\"\u003eZipfian distribution for pgbench\u003c/a\u003e and psql command to \u003ca href=\"https://commitfest.postgresql.org/22/1689/\"\u003eshow access methods info\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/pulls?q=is%3Amerged+is%3Apr+author%3Aalikhil+archived%3Afalse+user%3Aupdatecli\"\u003eupdatecli\u003c/a\u003e - enhanced helm chart changelog generation and GitLab plugin.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/pulls?q=is%3Amerged+is%3Apr+author%3Aalikhil+archived%3Afalse+user%3Agruntwork-io+\"\u003egruntwork-io/terragrunt\u003c/a\u003e - made a few improvements on builtin functions and CLI commands.\u003c/p\u003e","title":"Projects"},{"content":"Here is a list of talks I gave in different conferences and meetups:\nCI/CD for golang projects with drone.io Avito.Tech meetup in Kazan, 2020\nDrone.io #101 Golang Meetup in Yoshkar-Ola, 2020\nConfiguring CI/CD for IaC Innopolis DevOps Meetup, 2022\nLink to timecode: https://www.youtube.com/watch?v=bZXlizneB8U\u0026amp;t=2840s\nIaC with Terraform and drone.io YandexScale in Moscow, 2022\nLink to timecode: https://www.youtube.com/watch?v=5wZ2G5idK1w\u0026amp;t=2318s\n","permalink":"https://alikhil.dev/pages/talks/","summary":"\u003cp\u003eHere is a list of talks I gave in different conferences and meetups:\u003c/p\u003e\n\u003ch4 id=\"cicd-for-golang-projects-with-droneio\"\u003eCI/CD for golang projects with drone.io\u003c/h4\u003e\n\u003cp\u003eAvito.Tech meetup in Kazan, 2020\u003c/p\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/mKT-bLdRGvQ?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003ch4 id=\"droneio-101\"\u003eDrone.io #101\u003c/h4\u003e\n\u003cp\u003eGolang Meetup in Yoshkar-Ola, 2020\u003c/p\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/MSsHRo9CYvk?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003ch4 id=\"configuring-cicd-for-iac\"\u003eConfiguring CI/CD for IaC\u003c/h4\u003e\n\u003cp\u003eInnopolis DevOps Meetup, 2022\u003c/p\u003e","title":"Talks"},{"content":"The Internet is plenty of articles that telling why you should not be using http.DefaultClient in Golang (one, two) but they refer to Timeout and MaxIdleConns settings.\nToday I want to share with you another reason why you should avoid using http.DefaultClient in your code.\nThe Story As an SRE at Criteo, I both read and write code. Last week, I worked on patching Updatecli — an upgrade automation tool written in Go.\nThe patch itself was just ~15 lines of code. But then I spent three days debugging a strange authorization bug in an unrelated part of the code.\nIt happened because of code like this:\nclient := http.DefaultClient client.Transport = \u0026amp;transport.PrivateToken{ Token: s.Token, Base: client.Client.Transport, } Since http.DefaultClient is a reference, not a value:\nvar DefaultClient = \u0026amp;Client{} The code above is effectively the same as:\nhttp.DefaultClient.Transport = \u0026amp;transport.PrivateToken{ Token: s.Token, Base: http.DefaultClient.Transport, } Later, in a third-party library, I found this:\nif opts.Client == nil { opts.Client = http.DefaultClient } The Fix To prevent this, I had to change the code to:\nclient := \u0026amp;http.Client{} client.Transport = \u0026amp;transport.PrivateToken{ Token: s.Token, Base: client.Transport, } As a result, the patched client with the authorization transport got injected into the third-party library, causing unexpected failures.\nBugs like this are hard to catch just by reading the code, since they involve global state mutation. But could they be detected by linters?\nWhat do you think? How do you find or prevent such issues in your projects?\n","permalink":"https://alikhil.dev/posts/go-global-http-client-gotcha/","summary":"\u003cp\u003eThe Internet is plenty of articles that telling why you should not be using \u003ccode\u003ehttp.DefaultClient\u003c/code\u003e in Golang (\u003ca href=\"https://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779\"\u003eone\u003c/a\u003e, \u003ca href=\"https://vishnubharathi.codes/blog/know-when-to-break-up-with-go-http-defaultclient/\"\u003etwo\u003c/a\u003e) but they refer to \u003ccode\u003eTimeout\u003c/code\u003e and \u003ccode\u003eMaxIdleConns\u003c/code\u003e settings.\u003c/p\u003e\n\u003cp\u003eToday I want to share with you another reason why you should avoid using \u003ccode\u003ehttp.DefaultClient\u003c/code\u003e in your code.\u003c/p\u003e","title":"Unintended Side Effects of Using http.DefaultClient in Go"},{"content":"After extensive travel, I’ve accumulated several mobile numbers and, naturally, physical SIM cards. Switching them out each time became tedious, even after buying a basic Nokia with two SIM slots, which only helped temporarily. When a friend asked if I could set up a Spanish number for account registrations, I realized it was time to automate the process.\nIf you’re dealing with multiple SIM cards and want to receive SMS in Telegram, I have a straightforward approach. You’ll need a Linux machine that’s always online, connected to the internet, and about $10.\nWhat You’ll Need A physical SIM card A USB modem that’s supported by the Gammu library A Telegram bot token, chat or channel ID A Linux machine with a free USB port Docker and Docker Compose installed Finding the Right Modem If you have a USB modem at home, check if it’s supported by Gammu.\nFor our purposes, we don’t need an expensive 4G modem with advanced features. Any basic 2G/3G modem will work, and these are easy to find at a discounted price on sites like eBay or Wallapop.\nSearch for “Huawei USB modem,” sort by price, and look for unlocked options or ones with compatible firmware.\nFor instance: Next, go to the Gammu website and look up the device. Make sure it appears on the list and that “SMS” is included in the \u0026ldquo;Supported features\u0026rdquo; column:\nIf the device meets these requirements, it’s good to go!\nSetup Instructions Before starting the setup, it’s best to connect the modem with the SIM card already inserted to your PC and check that it’s functioning properly.\nIdentify Device Path Run the following command to identify the device path:\ntree /dev/serial/by-id/ You should see a paths similar to:\n/dev/serial/by-id ├── usb-HUAWEI_HUAWEI_Mobile-if00-port0 -\u0026gt; ../../ttyUSB0 ├── usb-HUAWEI_HUAWEI_Mobile-if02-port0 -\u0026gt; ../../ttyUSB1 ├── usb-HUAWEI_HUAWEI_Mobile-if03-port0 -\u0026gt; ../../ttyUSB2 Choose a path that ends with ttyUSB0, in my case it\u0026rsquo;s /dev/serial/by-id/usb-HUAWEI_HUAWEI_Mobile-if00-port0.\nRunning the Service Using Docker Compose, set up your configuration:\nservices: gammu: image: ghcr.io/alikhil/sms-to-telegram:latest volumes: - type: bind source: /dev/serial/by-id/usb-HUAWEI_HUAWEI_Mobile-if00-port0 # Change this to your device path target: /dev/modem privileged: true environment: - BOT_TOKEN=\u0026lt;put your telegram bot token here\u0026gt; - PIN=\u0026lt;your sim card pin\u0026gt; - CHAT_ID=\u0026lt;telegram chat/channel ID\u0026gt; - DEVICE=/dev/modem - PROTOCOL=at cap_add: - NET_ADMIN - SYS_MODULE Save the configuration to a docker-compose.yml file and run:\ndocker compose up -d docker compose logs -f gammu If everything is set up correctly, you should see the following log messages:\ngammu-1 | Fri 2024/10/04 17:50:56 gammu-smsd[12]: Created POSIX RW shared memory at 0x7fcf90b21000 gammu-1 | Fri 2024/10/04 17:50:56 gammu-smsd[12]: Starting phone communication... gammu-1 | Fri 2024/10/04 17:55:30 gammu-smsd[12]: Ignoring incoming SMS info as not a Status Report in SR memory. gammu-1 | Fri 2024/10/04 17:55:33 gammu-smsd[12]: Read 1 messages gammu-1 | Fri 2024/10/04 17:55:33 gammu-smsd[12]: Received IN20241004_195517_00_Celerity_00.txt gammu-1 | Fri 2024/10/04 17:55:33 gammu-smsd[13]: Starting run on receive: /etc/sms_to_telegram.sh IN20241004_195517_00_Celerity_00.txt gammu-1 | Fri 2024/10/04 17:55:33 gammu-smsd[12]: Process finished successfully To test SMS reception, you can use free online SMS-sending services (search for \u0026ldquo;send SMS for free\u0026rdquo;) or try logging into Telegram, your bank account, etc.\nHow It Works The Gammu library provides a unified interface for working with phones and modems from various manufacturers.\nOn top of that, there\u0026rsquo;s the Gammu SMS Daemon, which receives SMS messages and triggers a custom script—in our case, script to send the messages to Telegram.\nFinal Thoughts Thanks to @kutovoys for the idea and Docker image!\nThis is a simple, affordable, and scalable solution—especially if you’re into self-hosting.\nThis post was originally written for vas3k.club.\n","permalink":"https://alikhil.dev/posts/forwarding-sms-to-telegram/","summary":"\u003cp\u003eAfter extensive travel, I’ve accumulated several mobile numbers and, naturally, physical SIM cards. Switching them out each time became tedious, even after buying a basic Nokia with two SIM slots, which only helped temporarily. When a friend asked if I could set up a Spanish number for account registrations, I realized it was time to automate the process.\u003c/p\u003e\n\u003cp\u003eIf you’re dealing with multiple SIM cards and want to receive SMS in Telegram, I have a straightforward approach. You’ll need a Linux machine that’s always online, connected to the internet, and about $10.\u003c/p\u003e","title":"Forwarding SMS to Telegram"},{"content":"If you as me have single monitor and 2 Mac devices (for example, I have corporate Macbook and personal Mac Mini) you may want to use the same monitor for both devices. And you may want to switch between them without unplugging and plugging cables or selecting input source using monitor buttons.\nIn this post I will show you how to configure hotkeys for that.\nHardware You will need a monitor with multiple input sources. For example, I have Dell S2722QC tt has 2 HDMI ports and 1 USB-C port where:\nMacbook Air connected to port HDMI-2 Mac Mini connected to port USB-C-1 Software There is app called BetterDisplay that has a lot of powerful features. But for our case we need only one feature - change display inputs using DDC.\nInstall it on both Macs. You will have 14 days trial period with all PRO features.\nEnable Accessibility for BetterDisplay in System Settings -\u0026gt; Privacy \u0026amp; Security -\u0026gt; Accessibility.\nThen try to switch input source by clicking on BetterDisplay icon in the menu bar -\u0026gt; DDC Input Source -\u0026gt; Select next port.\nIf it works, you can continue to the next step. Otherwise check if your monitor supports DDC protocol and ensure Accessibility is enabled for BetterDisplay.\nPaid option If you are ready to pay 19$/19€ x2 for both Macs you can buy BetterDisplay. And then configure hotkeys in the app settings Settings -\u0026gt; Keyboards -\u0026gt; Custom keyboard shortcuts -\u0026gt; DDC Input Source.\nClick \u0026ldquo;Record Shortcut\u0026rdquo; and press the key combination you want to use, for example CMD + F1 and CMD + F2.\nFree option If you like me don\u0026rsquo;t want to pay for 40$ for single feature there is a hacky way to do it.\nWe need an app that can handle hotkeys and run shell commands. I use Raycast, so called \u0026ldquo;Spotlight on steroids\u0026rdquo; and it can handle custom hotkeys. Or you can use any other app you like.\nConfiguring shell command Before configuring Raycast we need to know ddc value for each input source. To do so, go to Settings -\u0026gt; Displays -\u0026gt; \u0026ldquo;Your monitor name\u0026rdquo; -\u0026gt; DDC Input Sources, and save IDs from Value column for each input source:\nIn my case it\u0026rsquo;s 18 for HDMI-2 and 25 for USB-C-1.\nThen create a directory ~/raycast-scripts and put there a script change-input-source.sh:\n#!/bin/bash # See full documentation here: https://github.com/raycast/script-commands # # Required parameters: # @raycast.schemaVersion 1 # @raycast.title Switch Monitor Input Source # @raycast.mode silent # # Optional parameters: # @raycast.icon 🖥️ # @raycast.packageName Raycast Scripts DEST_ID=18 \u0026lt;PUT YOUR DDC ID HERE\u0026gt; DEST_NAME=\u0026#34;Home Mac Mini\u0026#34; # PUT YOUR ACTUAL HOSTNAME if [ `hostname` == \u0026#34;Aliks-Mac-mini.local\u0026#34; ]; then DEST_ID=25 \u0026lt;PUT YOUR SECOND DDC ID HERE\u0026gt; DEST_NAME=\u0026#34;Work Macbook Air\u0026#34; fi echo \u0026#34;Switching monitor input source to $DEST_NAME\u0026#34; /Applications/BetterDisplay.app/Contents/MacOS/BetterDisplay set -ddc=$DEST_ID -vcp=inputSelect After that try to run it in terminal:\nchmod +x ~/raycast-scripts/change-input-source.sh ~/raycast-scripts/change-input-source.sh If it works, you can continue to the next step.\nConfiguring Raycast Open Raycast and go to Settings -\u0026gt; Extensions -\u0026gt; Search for Scripts Click on Add Script Directory and select ~/raycast-scripts Click on Record Shortcut for newly added script and press the key combination you want to use, for example CMD + F1 on first Mac and CMD + F2 on second. And that\u0026rsquo;s it! Now you can switch input source using hotkeys.\n","permalink":"https://alikhil.dev/posts/monitor-input-source-control-mac/","summary":"\u003cp\u003eIf you as me have single monitor and 2 Mac devices (for example, I have corporate Macbook and personal Mac Mini) you may want to use the same monitor for both devices. And you may want to switch between them without unplugging and plugging cables or selecting input source using monitor buttons.\u003c/p\u003e\n\u003cp\u003eIn this post I will show you how to configure hotkeys for that.\u003c/p\u003e","title":"Monitor input source control on Mac"},{"content":"¡Hola, amigos!\nIn this post, I will quickly descibe how you can build your own drone.io docker image.\nDrone is very popular container native CI/CD platform. Not long time ago, there was release of new 1.0 version of drone. Which brang a lot of cool features and new license. The license tells that we can use Enterprise version of drone for free without any limits by building our own docker image if we are individuals or startup (read the licence for more detail).\nSo, how to build it?\nInstructions First, clone the drone repo to your local machine.\ngit clone git@github.com:drone/drone.git Second, checkout to version of drone you want to build. For example, I want to build v1.3.1:\ngit checkout v1.3.1 We will use single dockerfile to build the image. To do so, we need to add extra step to existing dockerfile which is in docker directory. Let\u0026rsquo;s say we want to build docker image for linux OS and amd64 architecture, then we will edit docker/Dockerfile.server.linux.amd64.\nIf you check the dockerfile you will see, that binaries are just copied into docker image during the build and they are built outside of the docker build. So, the step we will add to dockerfile is go build step.\nTo build the binary, we need to know what version of go is used for building binary in original docker image. We can find it in drone.yml build step. For version 1.3.1 of drone golang:1.12.9 docker image is used for building binaries.\nThen, we use same image to build binary in our dockerfile:\ndocker/Dockerfile.server.linux.amd64\nFROM golang:1.12.9 as builder WORKDIR /go/src/github.com/drone/drone COPY . . ENV GOOS linux ENV GOARCH amd64 ENV CGO_ENABLED 1 ENV REPO github.com/drone/drone ENV GO111MODULE on RUN go build -tags nolimit -ldflags \u0026#34;-extldflags \\\u0026#34;-static\\\u0026#34;\u0026#34; -o release/linux/${GOARCH}/drone-server ${REPO}/cmd/drone-server FROM alpine:3.9 as alpine RUN apk add -U --no-cache ca-certificates FROM alpine:3.9 EXPOSE 80 443 VOLUME /data ENV GODEBUG netdns=go ENV XDG_CACHE_HOME /data ENV DRONE_DATABASE_DRIVER sqlite3 ENV DRONE_DATABASE_DATASOURCE /data/database.sqlite ENV DRONE_RUNNER_OS=linux ENV DRONE_RUNNER_ARCH=amd64 ENV DRONE_SERVER_PORT=:80 ENV DRONE_SERVER_HOST=localhost ENV DRONE_DATADOG_ENABLED=true ENV DRONE_DATADOG_ENDPOINT=https://stats.drone.ci/api/v1/series COPY --from=alpine /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ COPY --from=builder /go/src/github.com/drone/drone/release/linux/amd64/drone-server /bin/ ENTRYPOINT [\u0026#34;/bin/drone-server\u0026#34;] Also we need to delete .dockerignore file from root of the repo.\nrm .dockerignore Then we build docker image like:\ndocker build -t alikhil/drone:1.3.1 -f docker/Dockerfile.server.linux.amd64 . That\u0026rsquo;s all! Now you can use own newly built docker image instead of official one if your use case meet license conditions.\n","permalink":"https://alikhil.dev/posts/build-own-drone-image/","summary":"\u003cp\u003e¡Hola, amigos!\u003c/p\u003e\n\u003cp\u003eIn this post, I will quickly descibe how you can build your own \u003ca href=\"https://drone.io\"\u003edrone.io\u003c/a\u003e docker image.\u003c/p\u003e","title":"Build own drone.io docker image"},{"content":"Hello, folks!\nToday I want you to share with you tutorial on how to deploy your SPA application to Kubernetes. Tutorial is oriented for those don\u0026rsquo;t very familiar with docker and k8s but want their single page application run in k8s.\nDockerize the application I expect that you have docker installed in your machine. If it isn\u0026rsquo;t you can install it by following official installation guide.\nAs SPA project I will use vue-realworld-example-app as SPA project. You can your own SPA project if you have one.\nSo, I have cloned it, installed dependencies and built:\ngit clone https://github.com/gothinkster/vue-realworld-example-app yarn yarn build Next step is to decide how our application will be served. There are bunch of possible solutions but I decided to use nginx since it recommends itself as one of the best http servers.\nTo serve SPA we need to return all requested files if they exist or otherwise fallback to index.html. To do so I wrote the following nginx config:\nnginx.conf\n# ... # other configs server { listen 80; root /app; location / { alias /app/; try_files $uri /index.html; } } Full config file can be found in my fork of the repo\nThen, we need to write Dockerfile for building image with our application. Here it is:\nFROM nginx WORKDIR /root/ COPY ./dist /app COPY ./nginx.conf /etc/nginx/conf.d/default.conf We assume that artifacts of build placed in the dist directory and so that during the docker build the content of dist directory copied into containers /app directory.\nNow, we are ready to build it:\ndocker build -t alikhil/my-spa:0.1 . And run it:\ndocker run -p 8080:80 alikhil/my-spa:0.1 Then if we open http://localhost:8080 we will see something similar to:\nCool! It works!\nWe will need to use our newly builded docker image to deploy to k8s. So, we need to make it available from the k8s cluster by pulling to some docker registry. I will push image to DockerHub:\ndocker push alikhil/my-spa:0.1 Deploy to k8s To run the application in k8s we will use Deployment resource type. Here it is:\ndeployment.yaml\napiVersion: extensions/v1beta1 kind: Deployment metadata: name: my-spa labels: app: my-spa spec: replicas: 1 template: metadata: labels: app: my-spa spec: containers: - image: alikhil/my-spa:0.1 name: spa ports: - containerPort: 80 resources: limits: cpu: 150m memory: 250Mi Then we create deployment by running kubectl apply -f deployment.yaml and newly created pods can found:\n$ kubectl get pods NAME READY STATUS RESTARTS AGE my-spa-84b6dcd48d-mhv9f 1/1 Running 0 18s Then we need to expose our app to the world. It can be done by using service of type NodePort or via Ingress. We will do it with Ingress. For that we will need service:\nservice.yaml\napiVersion: v1 kind: Service metadata: name: my-spa labels: app: my-spa spec: type: ClusterIP ports: - port: 80 targetPort: 80 protocol: TCP name: http selector: app: my-spa And ingress itself:\ningress.yaml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: my-spa-ing annotations: kubernetes.io/ingress.class: nginx spec: tls: - hosts: - my-spa.example.com secretName: my-spa-cert-secret rules: - host: my-spa.example.com http: paths: - path: / backend: serviceName: my-spa servicePort: 80 kubectl apply -f ingress.yaml -f service.yaml And here it is! Our SPA runs in the k8s!\n","permalink":"https://alikhil.dev/posts/deploy-spa-to-k8s/","summary":"\u003cp\u003eHello, folks!\u003c/p\u003e\n\u003cp\u003eToday I want you to share with you tutorial on how to deploy your SPA application to Kubernetes. Tutorial is oriented for those don\u0026rsquo;t very familiar with docker and k8s but want their single page application run in k8s.\u003c/p\u003e","title":"Deploy SPA application to Kubernetes"},{"content":"If you expected only post on IT topics on this blog, I am sorry :( Today I\u0026rsquo;ll share you my experience in learning a new language. I am practicing these techniques and tips for mastering Español, but I am sure that you can apply them to most of the other languages.\nGamification If you are only starting to learn then this will be helpful for you in double. Most of the people give up learning after several weeks or even days after they begin. It\u0026rsquo;s because of their motivation. It becomes lower with time. And in the beginning when you know almost nothing and understand that you should work hard and work a lot to learn. It really demotivates. And I think elements of gamification will help to increase motivation and turn learning process to habit. You can gamify your learning in any way you want. I recommend:\nDuolingo or Linguoleo - good for learning the basics of the language Tinycard - for learning/memorizing new words Listen As soon as you have learned basics, start listening to podcasts. There are some free audio podcasts oriented for beginners. For example, in Spanish, it\u0026rsquo;s a Notes in Spanish.\nCreate a playlist with up to 20 songs you like on language you learn and listen to them regularly. And keep listening until you will understand what a song about. You don\u0026rsquo;t have to translate all the words in each song. In fact, It is not very useful. But opposite, when you learn new words from textbook, tinycard or from anywhere else and you hear this word while you are listening to your playlist you learn better.\n\u0026ndash; Oh, wait. I know what this word means \u0026hellip;\nWatch If you are fun of TV-shows, you can start watching them in the language you learn. With subtitles or without them. Of course, it requires some basic knowledge. If you care that you will miss some key points of the story and prefer to fully understand it, you can watch sitcoms which don\u0026rsquo;t have almost anything in common between series.\n","permalink":"https://alikhil.dev/posts/how-to-start-learning-new-language/","summary":"\u003cp\u003eIf you expected only post on IT topics on this blog, I am sorry :(\nToday I\u0026rsquo;ll share you my experience in learning a new language. I am practicing these techniques and tips for mastering Español, but I am sure that you can apply them to most of the other languages.\u003c/p\u003e","title":"Tips for language learners"},{"content":"Hello, folks!\nIn this post, I will go through configuring Bitly OAuth2 proxy in a kubernetes cluster.\nA few days ago I was configuring SSO for our internal dev-services in KE Technologies.\nAnd I spent the whole to make it work properly, and at the end I decided that I will share my experience by writing this post, hoping that it will help others(and possibly me in the future) to go through this process.\nWhat do we want? We have internal services in our k8s cluster that we want to be accessible for developers. It can be kubernetes-dashboard or kibana or anything else.\nBefore that we used Basic Auth, it\u0026rsquo;s easy to setup in ingresses. But this approach has several disadvantages:\nWe need to share a single pair of login and password for all services among all developers Developers will be asked to enter credentials each time when they access service first time What we want is that developer will log in once and will have access to all other services without additional authentication.\nSo, a possible scenario could be:\nDevelopers open https://kibana.example.com which is internal service Browser redirects them to https://auth.example.com where they sign in After successful authentication browser redirects them to https://kibana.example.com Preparation Update UPD 1.0(07/30/18) Using kube-lego for configuring Let\u0026rsquo;s Encrypt certificates is depricated now. Consider using cert-manager instead.\nUPD 2.0(08/24/18) Initialy, when I was writing this post I was using old version of nginx 0.9.0, because it did not work correctly on newer version. Now, I found the problem and it have been fixed in 0.18.0 release. But ingress exposing private services should be updated(more details):\nnginx.ingress.kubernetes.io/auth-signin: https://auth.example.com/oauth2/start?rd=https://$host$request_uri$is_args$args nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth-proxy.svc.cluster.local:4180/oauth2/auth Kubernetes First of all, we need a Kubernetes cluster. I will use the newly created cluster in Google Cloud Platform with version 1.8.10-gke.0. If you have a cluster with configured ingress and https you can skip this step.\nThen we need to install nginx ingress and kube lego. Let\u0026rsquo;s do it using helm:\nInit helm With RBAC:\n# giving default accout admin role: ACCOUNT=$(gcloud info --format=\u0026#39;value(config.account)\u0026#39;) kubectl create clusterrolebinding owner-cluster-admin-binding \\ --clusterrole cluster-admin \\ --user $ACCOUNT kubectl -n kube-system create sa tiller kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller helm init --service-account tiller without RBAC:\nhelm init Install nginx-ingress helm install stable/nginx-ingress --name nginx-ing --namespace nginx-ing \\ --set controller.image.repository=gcr.io/google_containers/nginx-ingress-controller \\ --set controller.image.tag=\u0026#34;0.9.0-beta.15\u0026#34; --set rbac.create=true # if RBAC is enabled in the cluster # see all options here: https://github.com/kubernetes/charts/blob/master/stable/nginx-ingress/values.yaml After it\u0026rsquo;s installed we can retrieve controller IP address:\nkubectl --namespace nginx-ing get services -o wide -w nginx-ing-nginx-ingress-controller and create DNS record to point our domain and subdomains to this IP address.\nA example.com xxx.xxx.xx.xxx CNAME *.example.com example.com Install kube-lego helm install --name kube-lego stable/kube-lego --namespace kube-lego \\ --set config.LEGO_SUPPORTED_INGRESS_CLASS=nginx \\ --set config.LEGO_SUPPORTED_INGRESS_PROVIDER=nginx \\ --set config.LEGO_DEFAULT_INGRESS_CLASS=nginx \\ --set config.LEGO_URL=https://acme-v01.api.letsencrypt.org/directory \\ --set rbac.create=true \\ --set image.tag=0.1.5 \\ --set config.LEGO_LOG_LEVEL=debug Test it! Let\u0026rsquo;s run simple HTTP server as service and expose it using nginx ingress:\nkubectl run simple-http --image=strm/helloworld-http --port=80 kubectl expose deployment simple-http --name example-service --port=80 --target-port=80 --type=NodePort example-ing.yaml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: example annotations: kubernetes.io/ingress.class: nginx kubernetes.io/tls-acme: \u0026#39;true\u0026#39; spec: rules: - host: service.example.com http: paths: - backend: serviceName: example-service servicePort: 80 path: / tls: - hosts: - \u0026#34;service.example.com\u0026#34; secretName: ing-tls kubectl apply -f example-ing.yaml Wait for a few seconds and open https://service.example.com and you should see something similar to this:\nExample GitHub application In this post, we will use GitHub accounts for authentication.\nSo, go to https://github.com/settings/applications/new and create new OAuth application\nFill Authorization callback URL field with https://auth.example.com/oauth2/callback where example.com is your domain name.\nGitHub Application After creating an application you will have Client ID and Client Secret which we will need in next step.\nDeploy OAuth Proxy There are a lot of docker images for OAuth proxy, but we can not use them because they do not support domain white-listing. The problem is that such functionality has not implemented yet.\nActualy there are several PRs that solve that problem but seems to be they frozen for an unknown amount of time.\nSo, the only thing I could do is to merge one of the PRs to current master and build own image.\nYou also can use my image, but if you worry about security just clone my fork and build image yourself.\nLet\u0026rsquo;s create a namespace and set it as current:\nkubectl create ns oauth-proxy kns oauth-proxy # I am using kubectx tool -\u0026gt; https://github.com/ahmetb/kubectx Deploy secret secret.yml\napiVersion: v1 kind: Secret metadata: name: oauth-proxy-secret namespace: oauth-proxy data: github-client-id: base64(YOUR_CLIENT_ID) github-client-secret: base64(YOUR_CLIENT_SECRET) cookie-secret: base64(random_string) kubectl create -f secret.yml Deploy deployment oauth-proxy.deployment.yml\napiVersion: extensions/v1beta1 kind: Deployment metadata: labels: k8s-app: oauth2-proxy name: oauth2-proxy namespace: oauth-proxy spec: replicas: 1 selector: matchLabels: k8s-app: oauth2-proxy template: metadata: labels: k8s-app: oauth2-proxy spec: containers: - name: oauth2-proxy image: alikhil/oauth2_proxy:2.2.2 imagePullPolicy: Always args: - --provider=github - --email-domain=* - --upstream=file:///dev/null - --http-address=0.0.0.0:4180 - --whitelist-domain=.example.com - --cookie-domain=.example.com # - --cookie-expire duration: expire timeframe for cookie (default 168h0m0s) # - --cookie-name string: the name of the cookie that the oauth_proxy creates (default \u0026#34;_oauth2_proxy\u0026#34;) # - --cookie-refresh duration: refresh the cookie after this duration; 0 to disable # - --cookie-secret string: the seed string for secure cookies (optionally base64 encoded) env: - name: OAUTH2_PROXY_CLIENT_ID valueFrom: secretKeyRef: name: oauth-proxy-secret key: github-client-id - name: OAUTH2_PROXY_CLIENT_SECRET valueFrom: secretKeyRef: name: oauth-proxy-secret key: github-client-secret - name: OAUTH2_PROXY_COOKIE_SECRET valueFrom: secretKeyRef: name: oauth-proxy-secret key: cookie-secret ports: - containerPort: 4180 protocol: TCP kubectl create -f oauth-proxy.deployment.yml Deploy service oauth-service.yml\napiVersion: v1 kind: Service metadata: labels: k8s-app: oauth2-proxy name: oauth2-proxy namespace: oauth-proxy spec: type: NodePort ports: - name: http port: 4180 protocol: TCP targetPort: 4180 selector: k8s-app: oauth2-proxy kubectl create -f oauth-service.yml Deploy ingress oauth-ing.yml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: oauth2-proxy namespace: oauth-proxy annotations: kubernetes.io/tls-acme: \u0026#34;true\u0026#34; kubernetes.io/ingress.class: \u0026#34;nginx\u0026#34; spec: rules: - host: auth.example.com http: paths: - backend: serviceName: oauth2-proxy servicePort: 4180 path: /oauth2 tls: - hosts: - auth.example.com secretName: oauth-proxy-tls kubectl create -f oauth-ing.yml Test it! You can update ingress that we used while configuring nginx-ingress or create a new one:\nexample-ing.yml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: example annotations: kubernetes.io/ingress.class: nginx kubernetes.io/tls-acme: \u0026#39;true\u0026#39; ingress.kubernetes.io/auth-url: https://auth.example.com/oauth2/auth ingress.kubernetes.io/auth-signin: https://auth.example.com/oauth2/start?rd=https://$host$request_uri$is_args$args spec: rules: - host: service.example.com http: paths: - backend: serviceName: example-service servicePort: 80 path: / tls: - hosts: - service.example.com secretName: ing-tls kubectl apply -f example-ing.yml Then visit service.example.com and you will be redirected to GitHub authorization page:\nGitHub Authorization page And once you authenticate, you will have access to all your services under ingress that point to auth.example.com until cookie expires.\nAnd that\u0026rsquo;s it! Now you can put any of your internal services behind ingress with OAuth.\nResources Here is a list of resources that helped me to go through this proccess first time:\nhttps://eng.fromatob.com/post/2017/02/lets-encrypt-oauth-2-and-kubernetes-ingress/ https://www.midnightfreddie.com/oauth2-proxy.html https://thenewstack.io/single-sign-on-for-kubernetes-dashboard-experience/ ","permalink":"https://alikhil.dev/posts/oauth2-proxy-for-kubernetes-services/","summary":"\u003cp\u003eHello, folks!\u003c/p\u003e\n\u003cp\u003eIn this post, I will go through configuring \u003ca href=\"https://github.com/bitly/oauth2_proxy\"\u003eBitly OAuth2 proxy\u003c/a\u003e in a kubernetes cluster.\u003c/p\u003e","title":"Oauth2 Proxy for Kubernetes Services"},{"content":"Today I migrated my blog to Hugo engine. So, it\u0026rsquo;s my first post here, yaay!\nThere were only 2 posts in my last blog and I decided to not migrate the one about creating blog in Jekyll. Since it is not actual now.\n","permalink":"https://alikhil.dev/posts/say-hello-to-hugo/","summary":"\u003cp\u003eToday I migrated my blog to \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e engine. So, it\u0026rsquo;s my first post here, yaay!\u003c/p\u003e","title":"Say hello to Hugo"},{"content":"Hi folks! It\u0026rsquo;s been a long time since I have published the last post, but now I came back with short quickstart guide in Go.\nIn this tutorial, we will configure Go environment in VS Code and write our first program in Go.\nInstall Go The first thing that you need to do it\u0026rsquo;s to install Go on your computer. To do so, download installer for your operating system from here and then run the installer.\nConfigure GOPATH By language convention, Go developers store all their code in a single place called workspace. Go also puts dependency packages in the workspace. So, in order to Go perform correctly, we need to set GOPATH variable with the path to the workspace.\nMacOS and Linux Set the GOPATH envar with workspace\nexport GOPATH=$HOME/go Also, we need to add GOPATH/bin to PATH in order to run compiler Go programs:\nexport PATH=$PATH:$GOPATH/bin Configure VS Code Install official Go extension.\nInstall delve debugger:\ngo get -u github.com/derekparker/delve/cmd/dlv I recommend you to add the following lines to your VS Code user settings:\nsettings.json\n{ \u0026#34;go.autocompleteUnimportedPackages\u0026#34;: true, \u0026#34;go.formatTool\u0026#34;: \u0026#34;gofmt\u0026#34; } Windows Create GOPATH envar:\nset GOPATH=c:\\Users\\%USERNAME%\\go Also, we need to add GOPATH\\bin to PATH in order to run compiler Go programs:\nset PATH=%PATH%;%GOPATH%\\bin Create project Move to your GOPATH/src directory. Create a directory for your project:\ncd $GOPATH/src mkdir -p github.com/alikhil/hello-world-with-go Open it using vscode:\ncode github.com/alikhil/hello-world-with-go Hello World Let\u0026rsquo;s create a file named program.go and put the following code there:\nprogram.go\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;¡Hola, mundo!\u0026#34;) } Run the program Finally, to run the program by pressing the F5 button in VS Code and you should see the message printed to Debug Console.\nThat\u0026rsquo;s all! My congratulations, you have just written your first program in Go!\nTroubleshooting If you fail to run your program and there is some message like \u0026ldquo;Cannot find a path to go\u0026rdquo;. Try to add to your PATH envar with path directory where go binary is stored.\nFor example in MacOS I have added following line to my ~/.bash_profile:\nexport PATH=/usr/local/go/bin:$PATH ","permalink":"https://alikhil.dev/posts/go-quickstart/","summary":"\u003cp\u003eHi folks!\nIt\u0026rsquo;s been a long time since I have published the last post, but now I came back with short quickstart guide in \u003cstrong\u003eGo\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn this tutorial, we will configure Go environment in VS Code and write our first program in Go.\u003c/p\u003e","title":"Go Quickstart"}]